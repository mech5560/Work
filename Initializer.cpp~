/*******************************************
 * Author: Michail Georgiou 
*  Last Modified: Time-stamp: <2014-05-01 18:51:10 mike_georgiou>   
*
*
Initializer.cpp -- This function will initializing my
problem. Specifically, the velocities and temperature will be initialized and
right after that the intermediate velocities, fluxes, densities and velocity
residuals will be computed.
*
* Written on Thursday,  1 May 2014.
********************************************/

#include"Initializer.h"

void Initializer(double*** velocity_x, double*** velocity_y, 
								 double*** velocity_z, double ***temperature,
								 double*** rho, double*** rho_old,
)
{

  //Assigning zero Initial conditions for the velocities and Arr.Temperature

  //Initializing the Velocities
  Initial_Zero(Arr.velocity_x,
               ldx, ldy, ldz,
               left_x,right_x,
               left_y,right_y,
               left_z,right_z);

  Initial_Zero(Arr.velocity_y,
               ldx, ldy, ldz,
               left_x,right_x,
               left_y,right_y,
               left_z,right_z);


  Initial_Zero(Arr.velocity_z,
               ldx, ldy, ldz,
               left_x,right_x,
               left_y,right_y,
               left_z,right_z);


  //Initializing the Arr.temperature
  Initial_One(Arr.temperature,
              ldx, ldy, ldz,
              left_x,right_x,
              left_y,right_y,
              left_z,right_z);


  BC_Single(Arr.temperature,
            ldx, ldy, ldz,
            left_x,right_x,
            left_y,right_y,
            left_z,right_z,
            1,
            temperature_top, temperature_bottom,
            Arr.dy);


  //Initializing  the Density for each Point
  Density_Calculator(Arr.rho_old,
                     Arr.temperature,
                     ldx, ldy, ldz);

  BC_Single(Arr.rho_old,
            ldx, ldy, ldz,
            left_x,right_x,
            left_y,right_y,
            left_z,right_z,
            0,
            rho_gradient_top, rho_gradient_bottom,
            Arr.dy);


  Density_Calculator(Arr.rho,
                     Arr.temperature,
                     ldx, ldy, ldz);

  BC_Single(Arr.rho,
            ldx, ldy, ldz,
            left_x,right_x,
            left_y,right_y,
            left_z,right_z,
            0,
            rho_gradient_top, rho_gradient_bottom,
            Arr.dy);


  /*Implementing the Velocity  boundary conditions for the predictor stage*/


  BC_Single(Arr.velocity_x,
            ldx, ldy, ldz,
            left_x,right_x,
            left_y,right_y,
            left_z,right_z,
            1,
            velocity_top, velocity_bottom,
            Arr.dy);

  BC_Single(Arr.velocity_y,
            ldx, ldy, ldz,
            left_x,right_x,
            left_y,right_y,
            left_z,right_z,
            1,
            velocity_top, velocity_bottom,
            Arr.dy);

  BC_Single(Arr.velocity_z,
            ldx, ldy, ldz,
            left_x,right_x,
            left_y,right_y,
            left_z,right_z,
            1,
            velocity_top, velocity_bottom,
            Arr.dy);



  //Initializing the Arr.Fluxes.
  //In order to do that I will use the Arr.Flux_Evaluation function.
  //But with the initial values as an input

  Flux_Evaluation_X(Arr.flux_x, Arr.velocity_x,
                    Arr.rho_old, Arr.pressure,
                    dx, dt,
                    ldx+1,  ldy,  ldz);

  Flux_Evaluation_Y(Arr.flux_y, Arr.velocity_y,
                    Arr.rho_old, Arr.pressure,
                    Arr.dy, dt,
                    ldx,  ldy+1, ldz);

  Flux_Evaluation_Z(Arr.flux_z, Arr.velocity_z,
                    Arr.rho_old,  Arr.pressure,
                    dz, dt,
                    ldx,  ldy,  ldz+1);

  //Assigning the BC for the Fluxes and the Intermediate Velocities
  BC_Flux(Arr.flux_x, Arr.flux_y, Arr.flux_z,
          Arr.velocity_x_tilda, Arr.velocity_y_tilda, Arr.velocity_z_tilda,
          ldx, ldy, ldz,
          left_x, right_x,
          left_y, right_y,
          left_z, right_z);


  //Initializing the Arr.Residuals at the n-1 time
  //In order to do that I will use the Velosity Residual Functions.
  //but with the initial values velocities as an input

  Velocity_Residual_X( Arr.residual_x_old,
                       Arr.velocity_x, Arr.velocity_y,Arr.velocity_z,
                       Arr.flux_x,Arr.flux_y,  Arr.flux_z,
                       Arr.temperature, Reynolds,
                       dx, Arr.dy,  dz,
                       ldx,  ldy,  ldz);


  Velocity_Residual_Y( Arr.residual_y_old,
                       Arr.velocity_x,  Arr.velocity_y, Arr.velocity_z,
                       Arr.flux_x, Arr.flux_y,  Arr.flux_z,
                       Arr.temperature, Reynolds,
                       dx, Arr.dy,  dz,
                       ldx,  ldy,  ldz);
 
  Velocity_Residual_Z( Arr.residual_z_old,
                       Arr.velocity_x,  Arr.velocity_y, Arr.velocity_z,
                       Arr.flux_x, Arr.flux_y,  Arr.flux_z,
                       Arr.temperature, Reynolds, Pressure_Gradient,
                       dx, Arr.dy, dz,
                       ldx,  ldy, ldz);

}
