/*******************************************
* Author: Michail Georgiou
*  Last Modified: Time-stamp: <2014-04-10 11:13:07 mike_georgiou>
*
* BC_Single.cpp -- In this program I will define the
* Boundary conditions for the Density and the Pressure.
*
*The index defines if i am having dirichlet or neuman BC
* at the wall
*
*index : 1 Dirichlet
*index : 0 Neuman
*
* Written on Thursday, 20 March 2014.
   **********************************************/


#include "Struct.h"
#include "./../../Header_Files/Data.h"

   void BC_Single(double ***Matrix, int ldz, int ldy, int ldx,
                  int lz, int rz, int ly, int ry, int lx, int rx, int index,
                  double BC_Top, double BC_Bottom, double ***Delta_Y)
{
  /* X- Direction BC */
    for (int k = -lz; k < ldz+rz; k++)
      {
        for (int j = -ly; j < ldy+ry; j++)
          {
            for (int i=1; i<=lx; i++)
              {
                /*******Left-Periodic-BC************/
                  Matrix[k][j][-i] =  Matrix[k][j][ldx-i];
              }
            for (int i=0; i<rx; i++)
              {
                /*******Right-Periodic-BC***********/
                  Matrix[k][j][ldx+i] =  Matrix[k][j][i];
              }

          }
      }

  /* Z-Direction BC*/
     for (int j = -ly; j < ldy+ry; j++)
       {
         for (int i = -lx; i< ldx+rx; i++)
           {
             for (int k=1; k<=lz; k++)
               {
                 /******* "Back"-Periodic-BC************/
                   Matrix[-k][j][i] =  Matrix[ldz-k][j][i];
               }

             for (int k=0; k<rz; k++)
               {
                 /*******"Front"-Periodic-BC***********/
                   Matrix[ldz+k][j][i] =  Matrix[k][j][i];
               }
           }
       }

  if (index==0) // Neuman BC = BC_Bottom
    {
      /*Wall-BC*/
      for (int k = -lz; k < ldz+rz; k++)
	{
	  for (int i = -lx; i< ldx+rx; i++)
	    {
	      /*Bottom Wall*/
		Matrix[k][-ly][i] = BC_Bottom*2.*Delta_Y[k][0][i] + Matrix[k][0][i];
	      Matrix[k][ldy][i] = -BC_Top*Delta_Y[k][ldy-1][i]*2. + Matrix[k][ldy-1][i];
	    }
	}
    }

  else if (index==1) // Dirichlet BC = BC_Bottom
    {
      /*Wall-BC*/
      for (int k = -lz; k < ldz+rz; k++)
	{
	  for (int i = -lx; i< ldx+rx; i++)
	    {
	      /*Bottom Wall*/
	      Matrix[k][-ly][i] = 2.*BC_Bottom - Matrix[k][0][i];
	      Matrix[k][ldy][i] = 2.*BC_Top - Matrix[k][ldy-1][i];
	    }
	}
    }
}
